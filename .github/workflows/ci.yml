name: CI/CD and Automated Testing

on:
  push:
    branches:
      - develop
      - release
  pull_request:
    branches:
      - develop
      - release

env:
  REAL_NAS: "false"  # Indicates whether to use a real NAS
  NAS_MOUNT_PATH: "./tests/integration"  # Default to simulated directory
  SMB_USERNAME: ""  # Set to empty as REAL_NAS is false
  SMB_PASSWORD: ""  # Set to empty as REAL_NAS is false
  BASE_URL: "http://localhost:5123"  # Base URL for the Flask app

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Use GitHub's Ubuntu runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.10
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install SQLCipher Dependencies
      - name: Install SQLCipher Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev

      # Step 5: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      # Step 6: Verify Pytest Installation
      - name: Verify Pytest Installation
        run: |
          pytest --version

      # Step 7: Install Google Chrome
      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      # Step 8: Setup ChromeDriver using a Dedicated Action
      - name: Install ChromeDriver
        uses: actions/checkout@v2 
      - uses: nanasess/setup-chromedriver@v2
        # with:
          # # Optional: do not specify to match Chrome's version
          # chromedriver-version: '88.0.4324.96'
      - run: |
          export DISPLAY=:99
          chromedriver --url-base=/wd/hub &
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional

      # Step 9: Setup Display and Xvfb
      - name: Setup Display and Xvfb
        run: |
          sudo apt-get install -y xvfb
          Xvfb :99 -screen 0 1280x1024x24 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      # Step 10: Set Up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 11: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 12: Build and Push Docker Image with Buildx and Caching
      - name: Build and Push Docker Image
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            -t cits3200-project-web:latest \
            -f Dockerfile .
          
          # Move the new cache
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Step 13: Start Docker Compose Services
      - name: Start Docker Compose Services
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml  up -d

      # Step 14: Wait for Flask App to be Healthy
      - name: Wait for Flask App to be Healthy
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:5123/ > /dev/null; then
              echo "Flask app is up and running!"
              break
            fi
            echo "Waiting for Flask app to start..."
            sleep 2
          done

      # Step 15: Verify Flask App Accessibility
      - name: Verify Flask App Accessibility
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5123/)
          if [ "$response" -eq 200 ]; then
            echo "Flask app is accessible and returned status 200."
          else
            echo "Flask app is not accessible. Status code: $response"
            exit 1
          fi

      # Step 16: List Running Docker Containers
      - name: List Running Docker Containers
        run: docker ps -a

      # Step 17: Run End-to-End Tests
      - name: Run End-to-End Tests
        env:
          TEST_ENCRYPT_PASSWORD: ${{ secrets.TEST_ENCRYPT_PASSWORD }}  # Securely inject secret
          BASE_URL: ${{ env.BASE_URL }}
        run: |
          # Run pytest with verbose output
          pytest -v tests/e2e/test_user_flow.py

      # Step 18: Upload Test Failure Screenshots
      - name: Upload Test Failure Screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-screenshots
          path: screenshots/

      # Step 19: Shutdown Docker Compose Services
      - name: Shutdown Docker Compose Services
        run: |
          docker compose down

