# .github/workflows/ci-cd-test.yml

name: CI/CD and Automated Testing

on:
  push:
    branches:
      - main
      - release
  pull_request:
    branches:
      - main
      - release

env:
  REAL_NAS: "false"  # Indicates whether to use a real NAS
  NAS_MOUNT_PATH: "./tests/integration"  # Default to simulated directory
  SMB_USERNAME: ""  # Set to empty as REAL_NAS is false
  SMB_PASSWORD: ""  # Set to empty as REAL_NAS is false

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Use GitHub's Ubuntu runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Python 3.10
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install SQLCipher Dependencies
      - name: Install SQLCipher Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlcipher-dev

      # Step 5: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt
      # Step 5.1: Verify Pytest Installation
      - name: Verify Pytest Installation
        run: |
          pytest --version

      # Step 6: Install Google Chrome
      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      # Step 7: Setup ChromeDriver using a Dedicated Action
      - name: Install ChromeDriver
        uses: actions/checkout@v2 
      - uses: nanasess/setup-chromedriver@v2
        # with:
          # # Optional: do not specify to match Chrome's version
          # chromedriver-version: '88.0.4324.96'
      - run: |
          export DISPLAY=:99
          chromedriver --url-base=/wd/hub &
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 & # optional
      
      # Step 8: Set NAS_MOUNT_PATH to Simulated Directory
      - name: Configure NAS_MOUNT_PATH
        run: |
          if [ "$REAL_NAS" = "false" ]; then
            echo "NAS_MOUNT_PATH=./tests/integration" >> $GITHUB_ENV
            mkdir -p tests/integration
            echo "Simulating NAS by using tests/integration directory."
            # Ensure the simulated directory exists and contains necessary files
            cp tests/e2e/test_spreadsheet.xlsx tests/integration/soil_test_results.db || true  # Copy a sample DB if needed
          fi
          
      # Step 9: Start Docker Compose Services
      - name: Start Docker Compose Services
        run: |
          docker compose up -d

      # Step 10: Wait for Flask App to be Healthy
      - name: Wait for Flask App to be Healthy
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:5123/ > /dev/null; then
              echo "Flask app is up and running!"
              break
            fi
            echo "Waiting for Flask app to start..."
            sleep 2
          done

      # Step 11: Run End-to-End Tests
      - name: Run End-to-End Tests
        env:
          TEST_ENCRYPT_PASSWORD: ${{ secrets.TEST_ENCRYPT_PASSWORD }}  # Securely inject secret
        run: |
          # Dynamically replace the spreadsheet path in the test script
          sed -i "s|./tests/e2e/test_spreadsheet_sample.xlsx|./tests/e2e/test_spreadsheet.xlsx|" tests/e2e/test_user_flow.py
          
          # Run pytest
          pytest tests/e2e/test_user_flow.py

      # Step 12: Shutdown Docker Compose Services
      - name: Shutdown Docker Compose Services
        run: |
          docker-compose down
